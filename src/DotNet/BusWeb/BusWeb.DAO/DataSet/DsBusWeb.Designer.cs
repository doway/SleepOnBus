//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BusWeb.DAO.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DsBusWeb")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DsBusWeb : global::System.Data.DataSet {
        
        private vwDupLineDetailDataTable tablevwDupLineDetail;
        
        private vwDupStopDetailDataTable tablevwDupStopDetail;
        
        private UsageStatisticDataTable tableUsageStatistic;
        
        private Line2StopDataTable tableLine2Stop;
        
        private LinesDataTable tableLines;
        
        private StopRatingDataTable tableStopRating;
        
        private StopsDataTable tableStops;
        
        private global::System.Data.DataRelation relationLinesLine2Stop;
        
        private global::System.Data.DataRelation relationStopsLine2Stop;
        
        private global::System.Data.DataRelation relationStopsStopRating;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DsBusWeb() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DsBusWeb(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["vwDupLineDetail"] != null)) {
                    base.Tables.Add(new vwDupLineDetailDataTable(ds.Tables["vwDupLineDetail"]));
                }
                if ((ds.Tables["vwDupStopDetail"] != null)) {
                    base.Tables.Add(new vwDupStopDetailDataTable(ds.Tables["vwDupStopDetail"]));
                }
                if ((ds.Tables["UsageStatistic"] != null)) {
                    base.Tables.Add(new UsageStatisticDataTable(ds.Tables["UsageStatistic"]));
                }
                if ((ds.Tables["Line2Stop"] != null)) {
                    base.Tables.Add(new Line2StopDataTable(ds.Tables["Line2Stop"]));
                }
                if ((ds.Tables["Lines"] != null)) {
                    base.Tables.Add(new LinesDataTable(ds.Tables["Lines"]));
                }
                if ((ds.Tables["StopRating"] != null)) {
                    base.Tables.Add(new StopRatingDataTable(ds.Tables["StopRating"]));
                }
                if ((ds.Tables["Stops"] != null)) {
                    base.Tables.Add(new StopsDataTable(ds.Tables["Stops"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vwDupLineDetailDataTable vwDupLineDetail {
            get {
                return this.tablevwDupLineDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public vwDupStopDetailDataTable vwDupStopDetail {
            get {
                return this.tablevwDupStopDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsageStatisticDataTable UsageStatistic {
            get {
                return this.tableUsageStatistic;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Line2StopDataTable Line2Stop {
            get {
                return this.tableLine2Stop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinesDataTable Lines {
            get {
                return this.tableLines;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopRatingDataTable StopRating {
            get {
                return this.tableStopRating;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopsDataTable Stops {
            get {
                return this.tableStops;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DsBusWeb cln = ((DsBusWeb)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["vwDupLineDetail"] != null)) {
                    base.Tables.Add(new vwDupLineDetailDataTable(ds.Tables["vwDupLineDetail"]));
                }
                if ((ds.Tables["vwDupStopDetail"] != null)) {
                    base.Tables.Add(new vwDupStopDetailDataTable(ds.Tables["vwDupStopDetail"]));
                }
                if ((ds.Tables["UsageStatistic"] != null)) {
                    base.Tables.Add(new UsageStatisticDataTable(ds.Tables["UsageStatistic"]));
                }
                if ((ds.Tables["Line2Stop"] != null)) {
                    base.Tables.Add(new Line2StopDataTable(ds.Tables["Line2Stop"]));
                }
                if ((ds.Tables["Lines"] != null)) {
                    base.Tables.Add(new LinesDataTable(ds.Tables["Lines"]));
                }
                if ((ds.Tables["StopRating"] != null)) {
                    base.Tables.Add(new StopRatingDataTable(ds.Tables["StopRating"]));
                }
                if ((ds.Tables["Stops"] != null)) {
                    base.Tables.Add(new StopsDataTable(ds.Tables["Stops"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablevwDupLineDetail = ((vwDupLineDetailDataTable)(base.Tables["vwDupLineDetail"]));
            if ((initTable == true)) {
                if ((this.tablevwDupLineDetail != null)) {
                    this.tablevwDupLineDetail.InitVars();
                }
            }
            this.tablevwDupStopDetail = ((vwDupStopDetailDataTable)(base.Tables["vwDupStopDetail"]));
            if ((initTable == true)) {
                if ((this.tablevwDupStopDetail != null)) {
                    this.tablevwDupStopDetail.InitVars();
                }
            }
            this.tableUsageStatistic = ((UsageStatisticDataTable)(base.Tables["UsageStatistic"]));
            if ((initTable == true)) {
                if ((this.tableUsageStatistic != null)) {
                    this.tableUsageStatistic.InitVars();
                }
            }
            this.tableLine2Stop = ((Line2StopDataTable)(base.Tables["Line2Stop"]));
            if ((initTable == true)) {
                if ((this.tableLine2Stop != null)) {
                    this.tableLine2Stop.InitVars();
                }
            }
            this.tableLines = ((LinesDataTable)(base.Tables["Lines"]));
            if ((initTable == true)) {
                if ((this.tableLines != null)) {
                    this.tableLines.InitVars();
                }
            }
            this.tableStopRating = ((StopRatingDataTable)(base.Tables["StopRating"]));
            if ((initTable == true)) {
                if ((this.tableStopRating != null)) {
                    this.tableStopRating.InitVars();
                }
            }
            this.tableStops = ((StopsDataTable)(base.Tables["Stops"]));
            if ((initTable == true)) {
                if ((this.tableStops != null)) {
                    this.tableStops.InitVars();
                }
            }
            this.relationLinesLine2Stop = this.Relations["LinesLine2Stop"];
            this.relationStopsLine2Stop = this.Relations["StopsLine2Stop"];
            this.relationStopsStopRating = this.Relations["StopsStopRating"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DsBusWeb";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DsBusWeb.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablevwDupLineDetail = new vwDupLineDetailDataTable();
            base.Tables.Add(this.tablevwDupLineDetail);
            this.tablevwDupStopDetail = new vwDupStopDetailDataTable();
            base.Tables.Add(this.tablevwDupStopDetail);
            this.tableUsageStatistic = new UsageStatisticDataTable();
            base.Tables.Add(this.tableUsageStatistic);
            this.tableLine2Stop = new Line2StopDataTable();
            base.Tables.Add(this.tableLine2Stop);
            this.tableLines = new LinesDataTable();
            base.Tables.Add(this.tableLines);
            this.tableStopRating = new StopRatingDataTable();
            base.Tables.Add(this.tableStopRating);
            this.tableStops = new StopsDataTable();
            base.Tables.Add(this.tableStops);
            this.relationLinesLine2Stop = new global::System.Data.DataRelation("LinesLine2Stop", new global::System.Data.DataColumn[] {
                        this.tableLines.LineIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLine2Stop.LineIDColumn}, false);
            this.Relations.Add(this.relationLinesLine2Stop);
            this.relationStopsLine2Stop = new global::System.Data.DataRelation("StopsLine2Stop", new global::System.Data.DataColumn[] {
                        this.tableStops.StopIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLine2Stop.StopIDColumn}, false);
            this.Relations.Add(this.relationStopsLine2Stop);
            this.relationStopsStopRating = new global::System.Data.DataRelation("StopsStopRating", new global::System.Data.DataColumn[] {
                        this.tableStops.StopIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableStopRating.StopIDColumn}, false);
            this.Relations.Add(this.relationStopsStopRating);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevwDupLineDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevwDupStopDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsageStatistic() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLine2Stop() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLines() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStopRating() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStops() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DsBusWeb ds = new DsBusWeb();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void vwDupLineDetailRowChangeEventHandler(object sender, vwDupLineDetailRowChangeEvent e);
        
        public delegate void vwDupStopDetailRowChangeEventHandler(object sender, vwDupStopDetailRowChangeEvent e);
        
        public delegate void UsageStatisticRowChangeEventHandler(object sender, UsageStatisticRowChangeEvent e);
        
        public delegate void Line2StopRowChangeEventHandler(object sender, Line2StopRowChangeEvent e);
        
        public delegate void LinesRowChangeEventHandler(object sender, LinesRowChangeEvent e);
        
        public delegate void StopRatingRowChangeEventHandler(object sender, StopRatingRowChangeEvent e);
        
        public delegate void StopsRowChangeEventHandler(object sender, StopsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vwDupLineDetailDataTable : global::System.Data.TypedTableBase<vwDupLineDetailRow> {
            
            private global::System.Data.DataColumn columnLineName;
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnminLatitude;
            
            private global::System.Data.DataColumn columnmaxLatitude;
            
            private global::System.Data.DataColumn columnminLongitude;
            
            private global::System.Data.DataColumn columnmaxLongitude;
            
            private global::System.Data.DataColumn columnStopCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailDataTable() {
                this.TableName = "vwDupLineDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwDupLineDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vwDupLineDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineNameColumn {
                get {
                    return this.columnLineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn minLatitudeColumn {
                get {
                    return this.columnminLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxLatitudeColumn {
                get {
                    return this.columnmaxLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn minLongitudeColumn {
                get {
                    return this.columnminLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maxLongitudeColumn {
                get {
                    return this.columnmaxLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopCountColumn {
                get {
                    return this.columnStopCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRow this[int index] {
                get {
                    return ((vwDupLineDetailRow)(this.Rows[index]));
                }
            }
            
            public event vwDupLineDetailRowChangeEventHandler vwDupLineDetailRowChanging;
            
            public event vwDupLineDetailRowChangeEventHandler vwDupLineDetailRowChanged;
            
            public event vwDupLineDetailRowChangeEventHandler vwDupLineDetailRowDeleting;
            
            public event vwDupLineDetailRowChangeEventHandler vwDupLineDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvwDupLineDetailRow(vwDupLineDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRow AddvwDupLineDetailRow(string LineName, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude, int StopCount) {
                vwDupLineDetailRow rowvwDupLineDetailRow = ((vwDupLineDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LineName,
                        null,
                        minLatitude,
                        maxLatitude,
                        minLongitude,
                        maxLongitude,
                        StopCount};
                rowvwDupLineDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvwDupLineDetailRow);
                return rowvwDupLineDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRow FindByLineID(int LineID) {
                return ((vwDupLineDetailRow)(this.Rows.Find(new object[] {
                            LineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vwDupLineDetailDataTable cln = ((vwDupLineDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vwDupLineDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineName = base.Columns["LineName"];
                this.columnLineID = base.Columns["LineID"];
                this.columnminLatitude = base.Columns["minLatitude"];
                this.columnmaxLatitude = base.Columns["maxLatitude"];
                this.columnminLongitude = base.Columns["minLongitude"];
                this.columnmaxLongitude = base.Columns["maxLongitude"];
                this.columnStopCount = base.Columns["StopCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineName = new global::System.Data.DataColumn("LineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineName);
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnminLatitude = new global::System.Data.DataColumn("minLatitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnminLatitude);
                this.columnmaxLatitude = new global::System.Data.DataColumn("maxLatitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxLatitude);
                this.columnminLongitude = new global::System.Data.DataColumn("minLongitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnminLongitude);
                this.columnmaxLongitude = new global::System.Data.DataColumn("maxLongitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxLongitude);
                this.columnStopCount = new global::System.Data.DataColumn("StopCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLineID}, true));
                this.columnLineName.MaxLength = 50;
                this.columnLineID.AutoIncrement = true;
                this.columnLineID.AutoIncrementSeed = -1;
                this.columnLineID.AutoIncrementStep = -1;
                this.columnLineID.AllowDBNull = false;
                this.columnLineID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRow NewvwDupLineDetailRow() {
                return ((vwDupLineDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vwDupLineDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vwDupLineDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vwDupLineDetailRowChanged != null)) {
                    this.vwDupLineDetailRowChanged(this, new vwDupLineDetailRowChangeEvent(((vwDupLineDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vwDupLineDetailRowChanging != null)) {
                    this.vwDupLineDetailRowChanging(this, new vwDupLineDetailRowChangeEvent(((vwDupLineDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vwDupLineDetailRowDeleted != null)) {
                    this.vwDupLineDetailRowDeleted(this, new vwDupLineDetailRowChangeEvent(((vwDupLineDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vwDupLineDetailRowDeleting != null)) {
                    this.vwDupLineDetailRowDeleting(this, new vwDupLineDetailRowChangeEvent(((vwDupLineDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevwDupLineDetailRow(vwDupLineDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vwDupLineDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class vwDupStopDetailDataTable : global::System.Data.TypedTableBase<vwDupStopDetailRow> {
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnStopID;
            
            private global::System.Data.DataColumn columnStopName;
            
            private global::System.Data.DataColumn columnRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailDataTable() {
                this.TableName = "vwDupStopDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwDupStopDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected vwDupStopDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopIDColumn {
                get {
                    return this.columnStopID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNameColumn {
                get {
                    return this.columnStopName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailRow this[int index] {
                get {
                    return ((vwDupStopDetailRow)(this.Rows[index]));
                }
            }
            
            public event vwDupStopDetailRowChangeEventHandler vwDupStopDetailRowChanging;
            
            public event vwDupStopDetailRowChangeEventHandler vwDupStopDetailRowChanged;
            
            public event vwDupStopDetailRowChangeEventHandler vwDupStopDetailRowDeleting;
            
            public event vwDupStopDetailRowChangeEventHandler vwDupStopDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddvwDupStopDetailRow(vwDupStopDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailRow AddvwDupStopDetailRow(int LineID, string StopName, int Rating) {
                vwDupStopDetailRow rowvwDupStopDetailRow = ((vwDupStopDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LineID,
                        null,
                        StopName,
                        Rating};
                rowvwDupStopDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowvwDupStopDetailRow);
                return rowvwDupStopDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                vwDupStopDetailDataTable cln = ((vwDupStopDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new vwDupStopDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineID = base.Columns["LineID"];
                this.columnStopID = base.Columns["StopID"];
                this.columnStopName = base.Columns["StopName"];
                this.columnRating = base.Columns["Rating"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnStopID = new global::System.Data.DataColumn("StopID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopID);
                this.columnStopName = new global::System.Data.DataColumn("StopName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopName);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnStopID.AutoIncrement = true;
                this.columnStopID.AutoIncrementSeed = -1;
                this.columnStopID.AutoIncrementStep = -1;
                this.columnStopName.MaxLength = 50;
                this.columnRating.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailRow NewvwDupStopDetailRow() {
                return ((vwDupStopDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new vwDupStopDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(vwDupStopDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.vwDupStopDetailRowChanged != null)) {
                    this.vwDupStopDetailRowChanged(this, new vwDupStopDetailRowChangeEvent(((vwDupStopDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.vwDupStopDetailRowChanging != null)) {
                    this.vwDupStopDetailRowChanging(this, new vwDupStopDetailRowChangeEvent(((vwDupStopDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.vwDupStopDetailRowDeleted != null)) {
                    this.vwDupStopDetailRowDeleted(this, new vwDupStopDetailRowChangeEvent(((vwDupStopDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.vwDupStopDetailRowDeleting != null)) {
                    this.vwDupStopDetailRowDeleting(this, new vwDupStopDetailRowChangeEvent(((vwDupStopDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovevwDupStopDetailRow(vwDupStopDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "vwDupStopDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsageStatisticDataTable : global::System.Data.TypedTableBase<UsageStatisticRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnUserCode;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnRadius;
            
            private global::System.Data.DataColumn columnDevice;
            
            private global::System.Data.DataColumn columnTimestamp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticDataTable() {
                this.TableName = "UsageStatistic";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsageStatisticDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsageStatisticDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserCodeColumn {
                get {
                    return this.columnUserCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RadiusColumn {
                get {
                    return this.columnRadius;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceColumn {
                get {
                    return this.columnDevice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRow this[int index] {
                get {
                    return ((UsageStatisticRow)(this.Rows[index]));
                }
            }
            
            public event UsageStatisticRowChangeEventHandler UsageStatisticRowChanging;
            
            public event UsageStatisticRowChangeEventHandler UsageStatisticRowChanged;
            
            public event UsageStatisticRowChangeEventHandler UsageStatisticRowDeleting;
            
            public event UsageStatisticRowChangeEventHandler UsageStatisticRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsageStatisticRow(UsageStatisticRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRow AddUsageStatisticRow(string UserCode, double Longitude, double Latitude, double Radius, byte Device, System.DateTime Timestamp) {
                UsageStatisticRow rowUsageStatisticRow = ((UsageStatisticRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserCode,
                        Longitude,
                        Latitude,
                        Radius,
                        Device,
                        Timestamp};
                rowUsageStatisticRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUsageStatisticRow);
                return rowUsageStatisticRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRow FindByID(int ID) {
                return ((UsageStatisticRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UsageStatisticDataTable cln = ((UsageStatisticDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UsageStatisticDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnUserCode = base.Columns["UserCode"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnRadius = base.Columns["Radius"];
                this.columnDevice = base.Columns["Device"];
                this.columnTimestamp = base.Columns["Timestamp"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnUserCode = new global::System.Data.DataColumn("UserCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserCode);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnRadius = new global::System.Data.DataColumn("Radius", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRadius);
                this.columnDevice = new global::System.Data.DataColumn("Device", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDevice);
                this.columnTimestamp = new global::System.Data.DataColumn("Timestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimestamp);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnUserCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRow NewUsageStatisticRow() {
                return ((UsageStatisticRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UsageStatisticRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UsageStatisticRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsageStatisticRowChanged != null)) {
                    this.UsageStatisticRowChanged(this, new UsageStatisticRowChangeEvent(((UsageStatisticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsageStatisticRowChanging != null)) {
                    this.UsageStatisticRowChanging(this, new UsageStatisticRowChangeEvent(((UsageStatisticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsageStatisticRowDeleted != null)) {
                    this.UsageStatisticRowDeleted(this, new UsageStatisticRowChangeEvent(((UsageStatisticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsageStatisticRowDeleting != null)) {
                    this.UsageStatisticRowDeleting(this, new UsageStatisticRowChangeEvent(((UsageStatisticRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsageStatisticRow(UsageStatisticRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsageStatisticDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Line2StopDataTable : global::System.Data.TypedTableBase<Line2StopRow> {
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnStopID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopDataTable() {
                this.TableName = "Line2Stop";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Line2StopDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Line2StopDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopIDColumn {
                get {
                    return this.columnStopID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow this[int index] {
                get {
                    return ((Line2StopRow)(this.Rows[index]));
                }
            }
            
            public event Line2StopRowChangeEventHandler Line2StopRowChanging;
            
            public event Line2StopRowChangeEventHandler Line2StopRowChanged;
            
            public event Line2StopRowChangeEventHandler Line2StopRowDeleting;
            
            public event Line2StopRowChangeEventHandler Line2StopRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLine2StopRow(Line2StopRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow AddLine2StopRow(LinesRow parentLinesRowByLinesLine2Stop, StopsRow parentStopsRowByStopsLine2Stop) {
                Line2StopRow rowLine2StopRow = ((Line2StopRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentLinesRowByLinesLine2Stop != null)) {
                    columnValuesArray[0] = parentLinesRowByLinesLine2Stop[0];
                }
                if ((parentStopsRowByStopsLine2Stop != null)) {
                    columnValuesArray[1] = parentStopsRowByStopsLine2Stop[0];
                }
                rowLine2StopRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLine2StopRow);
                return rowLine2StopRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow FindByLineIDStopID(int LineID, int StopID) {
                return ((Line2StopRow)(this.Rows.Find(new object[] {
                            LineID,
                            StopID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Line2StopDataTable cln = ((Line2StopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Line2StopDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineID = base.Columns["LineID"];
                this.columnStopID = base.Columns["StopID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnStopID = new global::System.Data.DataColumn("StopID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLineID,
                                this.columnStopID}, true));
                this.columnLineID.AllowDBNull = false;
                this.columnStopID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow NewLine2StopRow() {
                return ((Line2StopRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Line2StopRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Line2StopRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Line2StopRowChanged != null)) {
                    this.Line2StopRowChanged(this, new Line2StopRowChangeEvent(((Line2StopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Line2StopRowChanging != null)) {
                    this.Line2StopRowChanging(this, new Line2StopRowChangeEvent(((Line2StopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Line2StopRowDeleted != null)) {
                    this.Line2StopRowDeleted(this, new Line2StopRowChangeEvent(((Line2StopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Line2StopRowDeleting != null)) {
                    this.Line2StopRowDeleting(this, new Line2StopRowChangeEvent(((Line2StopRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLine2StopRow(Line2StopRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Line2StopDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinesDataTable : global::System.Data.TypedTableBase<LinesRow> {
            
            private global::System.Data.DataColumn columnLineID;
            
            private global::System.Data.DataColumn columnLineName;
            
            private global::System.Data.DataColumn columnCulture;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesDataTable() {
                this.TableName = "Lines";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineNameColumn {
                get {
                    return this.columnLineName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CultureColumn {
                get {
                    return this.columnCulture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow this[int index] {
                get {
                    return ((LinesRow)(this.Rows[index]));
                }
            }
            
            public event LinesRowChangeEventHandler LinesRowChanging;
            
            public event LinesRowChangeEventHandler LinesRowChanged;
            
            public event LinesRowChangeEventHandler LinesRowDeleting;
            
            public event LinesRowChangeEventHandler LinesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinesRow(LinesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow AddLinesRow(string LineName, string Culture, System.DateTime DateCreated) {
                LinesRow rowLinesRow = ((LinesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LineName,
                        Culture,
                        DateCreated};
                rowLinesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinesRow);
                return rowLinesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow FindByLineID(int LineID) {
                return ((LinesRow)(this.Rows.Find(new object[] {
                            LineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinesDataTable cln = ((LinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLineID = base.Columns["LineID"];
                this.columnLineName = base.Columns["LineName"];
                this.columnCulture = base.Columns["Culture"];
                this.columnDateCreated = base.Columns["DateCreated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLineID = new global::System.Data.DataColumn("LineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnLineName = new global::System.Data.DataColumn("LineName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineName);
                this.columnCulture = new global::System.Data.DataColumn("Culture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCulture);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLineID}, true));
                this.columnLineID.AutoIncrement = true;
                this.columnLineID.AutoIncrementSeed = -1;
                this.columnLineID.AutoIncrementStep = -1;
                this.columnLineID.AllowDBNull = false;
                this.columnLineID.Unique = true;
                this.columnLineName.MaxLength = 50;
                this.columnCulture.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow NewLinesRow() {
                return ((LinesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinesRowChanged != null)) {
                    this.LinesRowChanged(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinesRowChanging != null)) {
                    this.LinesRowChanging(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinesRowDeleted != null)) {
                    this.LinesRowDeleted(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinesRowDeleting != null)) {
                    this.LinesRowDeleting(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinesRow(LinesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StopRatingDataTable : global::System.Data.TypedTableBase<StopRatingRow> {
            
            private global::System.Data.DataColumn columnStopID;
            
            private global::System.Data.DataColumn columnRatingGood;
            
            private global::System.Data.DataColumn columnRatingBad;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingDataTable() {
                this.TableName = "StopRating";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopRatingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StopRatingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopIDColumn {
                get {
                    return this.columnStopID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingGoodColumn {
                get {
                    return this.columnRatingGood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingBadColumn {
                get {
                    return this.columnRatingBad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow this[int index] {
                get {
                    return ((StopRatingRow)(this.Rows[index]));
                }
            }
            
            public event StopRatingRowChangeEventHandler StopRatingRowChanging;
            
            public event StopRatingRowChangeEventHandler StopRatingRowChanged;
            
            public event StopRatingRowChangeEventHandler StopRatingRowDeleting;
            
            public event StopRatingRowChangeEventHandler StopRatingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStopRatingRow(StopRatingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow AddStopRatingRow(StopsRow parentStopsRowByStopsStopRating, int RatingGood, int RatingBad) {
                StopRatingRow rowStopRatingRow = ((StopRatingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RatingGood,
                        RatingBad};
                if ((parentStopsRowByStopsStopRating != null)) {
                    columnValuesArray[0] = parentStopsRowByStopsStopRating[0];
                }
                rowStopRatingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStopRatingRow);
                return rowStopRatingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow FindByStopID(int StopID) {
                return ((StopRatingRow)(this.Rows.Find(new object[] {
                            StopID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StopRatingDataTable cln = ((StopRatingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StopRatingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStopID = base.Columns["StopID"];
                this.columnRatingGood = base.Columns["RatingGood"];
                this.columnRatingBad = base.Columns["RatingBad"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStopID = new global::System.Data.DataColumn("StopID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopID);
                this.columnRatingGood = new global::System.Data.DataColumn("RatingGood", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatingGood);
                this.columnRatingBad = new global::System.Data.DataColumn("RatingBad", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatingBad);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStopID}, true));
                this.columnStopID.AllowDBNull = false;
                this.columnStopID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow NewStopRatingRow() {
                return ((StopRatingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StopRatingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StopRatingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopRatingRowChanged != null)) {
                    this.StopRatingRowChanged(this, new StopRatingRowChangeEvent(((StopRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopRatingRowChanging != null)) {
                    this.StopRatingRowChanging(this, new StopRatingRowChangeEvent(((StopRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopRatingRowDeleted != null)) {
                    this.StopRatingRowDeleted(this, new StopRatingRowChangeEvent(((StopRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopRatingRowDeleting != null)) {
                    this.StopRatingRowDeleting(this, new StopRatingRowChangeEvent(((StopRatingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStopRatingRow(StopRatingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StopRatingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StopsDataTable : global::System.Data.TypedTableBase<StopsRow> {
            
            private global::System.Data.DataColumn columnStopID;
            
            private global::System.Data.DataColumn columnStopName;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnLatitude;
            
            private global::System.Data.DataColumn columnCreatorLongitude;
            
            private global::System.Data.DataColumn columnCreatorLatitude;
            
            private global::System.Data.DataColumn columnOwner;
            
            private global::System.Data.DataColumn columnCulture;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsDataTable() {
                this.TableName = "Stops";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StopsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopIDColumn {
                get {
                    return this.columnStopID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StopNameColumn {
                get {
                    return this.columnStopName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudeColumn {
                get {
                    return this.columnLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatorLongitudeColumn {
                get {
                    return this.columnCreatorLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatorLatitudeColumn {
                get {
                    return this.columnCreatorLatitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerColumn {
                get {
                    return this.columnOwner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CultureColumn {
                get {
                    return this.columnCulture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow this[int index] {
                get {
                    return ((StopsRow)(this.Rows[index]));
                }
            }
            
            public event StopsRowChangeEventHandler StopsRowChanging;
            
            public event StopsRowChangeEventHandler StopsRowChanged;
            
            public event StopsRowChangeEventHandler StopsRowDeleting;
            
            public event StopsRowChangeEventHandler StopsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStopsRow(StopsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow AddStopsRow(string StopName, double Longitude, double Latitude, double CreatorLongitude, double CreatorLatitude, string Owner, string Culture, System.DateTime DateCreated) {
                StopsRow rowStopsRow = ((StopsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StopName,
                        Longitude,
                        Latitude,
                        CreatorLongitude,
                        CreatorLatitude,
                        Owner,
                        Culture,
                        DateCreated};
                rowStopsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStopsRow);
                return rowStopsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow FindByStopID(int StopID) {
                return ((StopsRow)(this.Rows.Find(new object[] {
                            StopID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StopsDataTable cln = ((StopsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StopsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStopID = base.Columns["StopID"];
                this.columnStopName = base.Columns["StopName"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnLatitude = base.Columns["Latitude"];
                this.columnCreatorLongitude = base.Columns["CreatorLongitude"];
                this.columnCreatorLatitude = base.Columns["CreatorLatitude"];
                this.columnOwner = base.Columns["Owner"];
                this.columnCulture = base.Columns["Culture"];
                this.columnDateCreated = base.Columns["DateCreated"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStopID = new global::System.Data.DataColumn("StopID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopID);
                this.columnStopName = new global::System.Data.DataColumn("StopName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStopName);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnLatitude = new global::System.Data.DataColumn("Latitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitude);
                this.columnCreatorLongitude = new global::System.Data.DataColumn("CreatorLongitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatorLongitude);
                this.columnCreatorLatitude = new global::System.Data.DataColumn("CreatorLatitude", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatorLatitude);
                this.columnOwner = new global::System.Data.DataColumn("Owner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwner);
                this.columnCulture = new global::System.Data.DataColumn("Culture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCulture);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnStopID}, true));
                this.columnStopID.AutoIncrement = true;
                this.columnStopID.AutoIncrementSeed = -1;
                this.columnStopID.AutoIncrementStep = -1;
                this.columnStopID.AllowDBNull = false;
                this.columnStopID.Unique = true;
                this.columnStopName.MaxLength = 50;
                this.columnOwner.MaxLength = 50;
                this.columnCulture.MaxLength = 15;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow NewStopsRow() {
                return ((StopsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StopsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StopsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopsRowChanged != null)) {
                    this.StopsRowChanged(this, new StopsRowChangeEvent(((StopsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopsRowChanging != null)) {
                    this.StopsRowChanging(this, new StopsRowChangeEvent(((StopsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopsRowDeleted != null)) {
                    this.StopsRowDeleted(this, new StopsRowChangeEvent(((StopsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopsRowDeleting != null)) {
                    this.StopsRowDeleting(this, new StopsRowChangeEvent(((StopsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStopsRow(StopsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DsBusWeb ds = new DsBusWeb();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StopsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vwDupLineDetailRow : global::System.Data.DataRow {
            
            private vwDupLineDetailDataTable tablevwDupLineDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwDupLineDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevwDupLineDetail = ((vwDupLineDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineName {
                get {
                    try {
                        return ((string)(this[this.tablevwDupLineDetail.LineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineName\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.LineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    return ((int)(this[this.tablevwDupLineDetail.LineIDColumn]));
                }
                set {
                    this[this.tablevwDupLineDetail.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double minLatitude {
                get {
                    try {
                        return ((double)(this[this.tablevwDupLineDetail.minLatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'minLatitude\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.minLatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double maxLatitude {
                get {
                    try {
                        return ((double)(this[this.tablevwDupLineDetail.maxLatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'maxLatitude\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.maxLatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double minLongitude {
                get {
                    try {
                        return ((double)(this[this.tablevwDupLineDetail.minLongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'minLongitude\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.minLongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double maxLongitude {
                get {
                    try {
                        return ((double)(this[this.tablevwDupLineDetail.maxLongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'maxLongitude\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.maxLongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopCount {
                get {
                    try {
                        return ((int)(this[this.tablevwDupLineDetail.StopCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopCount\' in table \'vwDupLineDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupLineDetail.StopCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNameNull() {
                return this.IsNull(this.tablevwDupLineDetail.LineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNameNull() {
                this[this.tablevwDupLineDetail.LineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsminLatitudeNull() {
                return this.IsNull(this.tablevwDupLineDetail.minLatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetminLatitudeNull() {
                this[this.tablevwDupLineDetail.minLatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxLatitudeNull() {
                return this.IsNull(this.tablevwDupLineDetail.maxLatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxLatitudeNull() {
                this[this.tablevwDupLineDetail.maxLatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsminLongitudeNull() {
                return this.IsNull(this.tablevwDupLineDetail.minLongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetminLongitudeNull() {
                this[this.tablevwDupLineDetail.minLongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxLongitudeNull() {
                return this.IsNull(this.tablevwDupLineDetail.maxLongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxLongitudeNull() {
                this[this.tablevwDupLineDetail.maxLongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopCountNull() {
                return this.IsNull(this.tablevwDupLineDetail.StopCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopCountNull() {
                this[this.tablevwDupLineDetail.StopCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class vwDupStopDetailRow : global::System.Data.DataRow {
            
            private vwDupStopDetailDataTable tablevwDupStopDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal vwDupStopDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevwDupStopDetail = ((vwDupStopDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    try {
                        return ((int)(this[this.tablevwDupStopDetail.LineIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineID\' in table \'vwDupStopDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupStopDetail.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopID {
                get {
                    try {
                        return ((int)(this[this.tablevwDupStopDetail.StopIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopID\' in table \'vwDupStopDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupStopDetail.StopIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StopName {
                get {
                    try {
                        return ((string)(this[this.tablevwDupStopDetail.StopNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopName\' in table \'vwDupStopDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupStopDetail.StopNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rating {
                get {
                    try {
                        return ((int)(this[this.tablevwDupStopDetail.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rating\' in table \'vwDupStopDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablevwDupStopDetail.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tablevwDupStopDetail.LineIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tablevwDupStopDetail.LineIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopIDNull() {
                return this.IsNull(this.tablevwDupStopDetail.StopIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopIDNull() {
                this[this.tablevwDupStopDetail.StopIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopNameNull() {
                return this.IsNull(this.tablevwDupStopDetail.StopNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopNameNull() {
                this[this.tablevwDupStopDetail.StopNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tablevwDupStopDetail.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tablevwDupStopDetail.RatingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsageStatisticRow : global::System.Data.DataRow {
            
            private UsageStatisticDataTable tableUsageStatistic;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsageStatisticRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsageStatistic = ((UsageStatisticDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableUsageStatistic.IDColumn]));
                }
                set {
                    this[this.tableUsageStatistic.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserCode {
                get {
                    try {
                        return ((string)(this[this.tableUsageStatistic.UserCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserCode\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.UserCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Longitude {
                get {
                    try {
                        return ((double)(this[this.tableUsageStatistic.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Latitude {
                get {
                    try {
                        return ((double)(this[this.tableUsageStatistic.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Radius {
                get {
                    try {
                        return ((double)(this[this.tableUsageStatistic.RadiusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Radius\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.RadiusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Device {
                get {
                    try {
                        return ((byte)(this[this.tableUsageStatistic.DeviceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Device\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.DeviceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Timestamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUsageStatistic.TimestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Timestamp\' in table \'UsageStatistic\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsageStatistic.TimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserCodeNull() {
                return this.IsNull(this.tableUsageStatistic.UserCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserCodeNull() {
                this[this.tableUsageStatistic.UserCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableUsageStatistic.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableUsageStatistic.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableUsageStatistic.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableUsageStatistic.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRadiusNull() {
                return this.IsNull(this.tableUsageStatistic.RadiusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRadiusNull() {
                this[this.tableUsageStatistic.RadiusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceNull() {
                return this.IsNull(this.tableUsageStatistic.DeviceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceNull() {
                this[this.tableUsageStatistic.DeviceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimestampNull() {
                return this.IsNull(this.tableUsageStatistic.TimestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimestampNull() {
                this[this.tableUsageStatistic.TimestampColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Line2StopRow : global::System.Data.DataRow {
            
            private Line2StopDataTable tableLine2Stop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Line2StopRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLine2Stop = ((Line2StopDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    return ((int)(this[this.tableLine2Stop.LineIDColumn]));
                }
                set {
                    this[this.tableLine2Stop.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopID {
                get {
                    return ((int)(this[this.tableLine2Stop.StopIDColumn]));
                }
                set {
                    this[this.tableLine2Stop.StopIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow LinesRow {
                get {
                    return ((LinesRow)(this.GetParentRow(this.Table.ParentRelations["LinesLine2Stop"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LinesLine2Stop"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow StopsRow {
                get {
                    return ((StopsRow)(this.GetParentRow(this.Table.ParentRelations["StopsLine2Stop"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StopsLine2Stop"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinesRow : global::System.Data.DataRow {
            
            private LinesDataTable tableLines;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLines = ((LinesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    return ((int)(this[this.tableLines.LineIDColumn]));
                }
                set {
                    this[this.tableLines.LineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineName {
                get {
                    try {
                        return ((string)(this[this.tableLines.LineNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineName\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.LineNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Culture {
                get {
                    try {
                        return ((string)(this[this.tableLines.CultureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Culture\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.CultureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLines.DateCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateCreated\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNameNull() {
                return this.IsNull(this.tableLines.LineNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNameNull() {
                this[this.tableLines.LineNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCultureNull() {
                return this.IsNull(this.tableLines.CultureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCultureNull() {
                this[this.tableLines.CultureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableLines.DateCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreatedNull() {
                this[this.tableLines.DateCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow[] GetLine2StopRows() {
                if ((this.Table.ChildRelations["LinesLine2Stop"] == null)) {
                    return new Line2StopRow[0];
                }
                else {
                    return ((Line2StopRow[])(base.GetChildRows(this.Table.ChildRelations["LinesLine2Stop"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StopRatingRow : global::System.Data.DataRow {
            
            private StopRatingDataTable tableStopRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopRatingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStopRating = ((StopRatingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopID {
                get {
                    return ((int)(this[this.tableStopRating.StopIDColumn]));
                }
                set {
                    this[this.tableStopRating.StopIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RatingGood {
                get {
                    try {
                        return ((int)(this[this.tableStopRating.RatingGoodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RatingGood\' in table \'StopRating\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStopRating.RatingGoodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RatingBad {
                get {
                    try {
                        return ((int)(this[this.tableStopRating.RatingBadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RatingBad\' in table \'StopRating\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStopRating.RatingBadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow StopsRow {
                get {
                    return ((StopsRow)(this.GetParentRow(this.Table.ParentRelations["StopsStopRating"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StopsStopRating"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingGoodNull() {
                return this.IsNull(this.tableStopRating.RatingGoodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingGoodNull() {
                this[this.tableStopRating.RatingGoodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingBadNull() {
                return this.IsNull(this.tableStopRating.RatingBadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingBadNull() {
                this[this.tableStopRating.RatingBadColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StopsRow : global::System.Data.DataRow {
            
            private StopsDataTable tableStops;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStops = ((StopsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopID {
                get {
                    return ((int)(this[this.tableStops.StopIDColumn]));
                }
                set {
                    this[this.tableStops.StopIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StopName {
                get {
                    try {
                        return ((string)(this[this.tableStops.StopNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StopName\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.StopNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Longitude {
                get {
                    try {
                        return ((double)(this[this.tableStops.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Latitude {
                get {
                    try {
                        return ((double)(this[this.tableStops.LatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitude\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.LatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CreatorLongitude {
                get {
                    try {
                        return ((double)(this[this.tableStops.CreatorLongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatorLongitude\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.CreatorLongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CreatorLatitude {
                get {
                    try {
                        return ((double)(this[this.tableStops.CreatorLatitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatorLatitude\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.CreatorLatitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Owner {
                get {
                    try {
                        return ((string)(this[this.tableStops.OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Owner\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Culture {
                get {
                    try {
                        return ((string)(this[this.tableStops.CultureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Culture\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.CultureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStops.DateCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateCreated\' in table \'Stops\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStops.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopNameNull() {
                return this.IsNull(this.tableStops.StopNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopNameNull() {
                this[this.tableStops.StopNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableStops.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableStops.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudeNull() {
                return this.IsNull(this.tableStops.LatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudeNull() {
                this[this.tableStops.LatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatorLongitudeNull() {
                return this.IsNull(this.tableStops.CreatorLongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatorLongitudeNull() {
                this[this.tableStops.CreatorLongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatorLatitudeNull() {
                return this.IsNull(this.tableStops.CreatorLatitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatorLatitudeNull() {
                this[this.tableStops.CreatorLatitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNull() {
                return this.IsNull(this.tableStops.OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNull() {
                this[this.tableStops.OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCultureNull() {
                return this.IsNull(this.tableStops.CultureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCultureNull() {
                this[this.tableStops.CultureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableStops.DateCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreatedNull() {
                this[this.tableStops.DateCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow[] GetLine2StopRows() {
                if ((this.Table.ChildRelations["StopsLine2Stop"] == null)) {
                    return new Line2StopRow[0];
                }
                else {
                    return ((Line2StopRow[])(base.GetChildRows(this.Table.ChildRelations["StopsLine2Stop"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow[] GetStopRatingRows() {
                if ((this.Table.ChildRelations["StopsStopRating"] == null)) {
                    return new StopRatingRow[0];
                }
                else {
                    return ((StopRatingRow[])(base.GetChildRows(this.Table.ChildRelations["StopsStopRating"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vwDupLineDetailRowChangeEvent : global::System.EventArgs {
            
            private vwDupLineDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRowChangeEvent(vwDupLineDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupLineDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class vwDupStopDetailRowChangeEvent : global::System.EventArgs {
            
            private vwDupStopDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailRowChangeEvent(vwDupStopDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public vwDupStopDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsageStatisticRowChangeEvent : global::System.EventArgs {
            
            private UsageStatisticRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRowChangeEvent(UsageStatisticRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsageStatisticRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Line2StopRowChangeEvent : global::System.EventArgs {
            
            private Line2StopRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRowChangeEvent(Line2StopRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Line2StopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinesRowChangeEvent : global::System.EventArgs {
            
            private LinesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRowChangeEvent(LinesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StopRatingRowChangeEvent : global::System.EventArgs {
            
            private StopRatingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRowChangeEvent(StopRatingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopRatingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StopsRowChangeEvent : global::System.EventArgs {
            
            private StopsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRowChangeEvent(StopsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591